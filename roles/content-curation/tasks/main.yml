---

- name: Create the /var/www directory and set it as belonging to the www-data user.
  file: dest=/var/www owner=www-data state=directory
  sudo: yes

- name: clone the content curation repo
  git: repo=https://github.com/fle-internal/content-curation.git version={{ content_curation_git_branch }} dest=/var/www/{{ content_curation_prefix }} update=yes
  sudo: yes
  sudo_user: www-data

- name: add the nodejs ppa
  shell: curl -sL https://deb.nodesource.com/setup | bash -
  sudo: yes
  tags:
    - setupdeps

- name: install deps
  apt: name={{ item }}
  sudo: yes
  with_items:
    - nodejs
    - nginx
    - python-dev
  tags:
    - setupdeps

- name: setup nginx
  template: src=nginx.content-curation.conf.j2 dest=/etc/nginx/sites-enabled/{{ content_curation_prefix }}
  notify: restart nginx
  sudo: yes
  tags:
    - setupnginx

- name: remove default nginx config
  file: dest=/etc/nginx/sites-enabled/default state=absent
  notify: restart nginx
  sudo: yes
  tags:
    - setupnginx

- name: install node deps
  shell: npm install
  args:
    chdir: /var/www/{{ content_curation_prefix }}/
  sudo: yes
  sudo_user: www-data

- name: install python deps
  shell: pip install -r requirements.txt
  args:
    chdir: /var/www/{{ content_curation_prefix }}/
  sudo: yes

- name: Copy production settings
  template: src=production_settings.py.j2 dest=/var/www/{{ content_curation_prefix }}/contentcuration/contentcuration/production_settings.py
  sudo: yes
  sudo_user: www-data
  tags:
    - setupcontentcuration
    - setupsettings

- name: run content curation migrations
  shell: DJANGO_SETTINGS_MODULE=contentcuration.production_settings python manage.py migrate
  args:
    chdir: /var/www/{{ content_curation_prefix }}/contentcuration/
  sudo: yes
  sudo_user: www-data
  tags:
    - setupcontentcuration

- name: collect the assets
  shell: DJANGO_SETTINGS_MODULE=contentcuration.production_settings python manage.py collectstatic --noinput && python manage.py collectstatic_js_reverse
  args:
    chdir: /var/www/{{ content_curation_prefix }}/contentcuration/
  sudo: yes
  sudo_user: www-data
  tags:
    - buildassets
    - setupcontentcuration

- name: create a dummy superuser
  shell: DJANGO_SETTINGS_MODULE=contentcuration.production_settings python manage.py createsuperuser --username=admin --email=admin@learningequality.org --noinput
  args:
    chdir: /var/www/{{ content_curation_prefix }}/contentcuration/
  sudo: yes
  ignore_errors: yes
  sudo_user: www-data
  tags:
    - setupcontentcuration

- name: create a dummy superuser
  shell: "echo 'from django.contrib.auth.models import User; u = User.objects.get(username=\"admin\"); print \"same_password\" if u.check_password(\"pass\") else \"changed_password\"; u.set_password(\"pass\"); u.save()' | python manage.py shell"
  args:
    chdir: /var/www/{{ content_curation_prefix }}/contentcuration/
  sudo: yes
  sudo_user: www-data
  tags:
    - setupcontentcuration
  register: setpassword
  changed_when: "'changed_password' in setpassword.stdout"

- name: create the js/bundles folder
  file: path=/var/www/{{ content_curation_prefix }}/contentcuration/static/js/bundles state=directory
  sudo: yes
  sudo_user: www-data
  tags:
    - buildassets
    - setupcontentcuration

- name: build the js bundles
  shell: node build.js --staticfiles
  args:
    chdir: /var/www/{{ content_curation_prefix }}/
  sudo: yes
  sudo_user: www-data
  tags:
    - buildassets
    - setupcontentcuration

- name: allow port 80 on our firewall
  ufw: policy=allow to_port=80
  sudo: yes
  tags:
    - setupcontentcuration

- name: create the media file directory
  file: path=/var/www/{{ content_curation_prefix }}_media/media/ state=directory
  sudo: yes
  sudo_user: www-data
  tags:
    - setupcontentcuration
    - setupsettings

- name: create the static file directory
  file: path=/var/www/{{ content_curation_prefix }}_static/ state=directory
  sudo: yes
  sudo_user: www-data
  tags:
    - setupcontentcuration
    - setupsettings

- name: check if the app server pid file info
  stat: path={{ content_curation_server_pid_file }}
  register: pid_file
  sudo: yes
  sudo_user: www-data
  tags:
    - runserver

- name: retrieve the app server pid file
  fetch: src={{ content_curation_server_pid_file }} dest=/tmp/gunicorn.pid fail_on_missing=yes flat=yes
  when: pid_file.stat.exists
  tags:
    - runserver

- name: reload the app server when it is already running
  shell: kill -s 1 {{ lookup('file', '/tmp/gunicorn.pid') }}
  sudo: yes
  sudo_user: www-data
  when: pid_file.stat.exists
  tags:
    - runserver

- name: run the server if it is not running
  shell: gunicorn contentcuration.wsgi --workers 3 --daemon --reload --bind=unix:/var/www/{{ content_curation_prefix}}/gunicorn.sock --pid {{ content_curation_server_pid_file }} --env PYTHONPATH='.:contentcuration/' --env DJANGO_SETTINGS_MODULE=contentcuration.production_settings --log-file /tmp/content_curation.log --log-level debug
  args:
    chdir: /var/www/{{ content_curation_prefix }}/contentcuration/
  sudo: yes
  sudo_user: www-data
  when: pid_file.stat.exists == False
  tags:
    - runserver
