---

- name: Load the list of authorized users for the current host.
  set_fact: 'authorized_users="{{ permissions[inventory_hostname] }}"'
  tags:
  - sshusers

- name: Set hostname to inventory name.
  hostname: name={{ inventory_hostname }}
  sudo: yes

- name: Set the remote /etc/hosts to point to each of the servers in the Ansible hosts file
  template: src=hosts.j2 dest=/etc/hosts
  sudo: yes
  when: set_hosts_file is defined and set_hosts_file

- name: Install common required system packages.
  apt: pkg={{ item }} state=installed update-cache=yes
  with_items: "{{ common_system_packages }}"
  sudo: yes

- name: Install role-specific required system packages.
  apt: pkg={{ item }} state=installed update-cache=yes
  with_items: "{{ system_packages }}"
  when: system_packages is defined
  sudo: yes

- name: Uninstall role-specific system packages that are not desired.
  apt: pkg={{ item }} state=absent
  with_items: "{{ system_packages_to_remove }}"
  when: system_packages_to_remove is defined
  sudo: yes

- name: Install common required Python packages.
  pip: name={{ item }}
  with_items: "{{ common_python_packages }}"
  sudo: yes

- name: Install role-specific required Python packages.
  pip: name={{ item }}
  with_items: python_packages
  when: python_packages is defined
  sudo: yes

- name: Set timezone to America/Los_Angeles.
  copy: src=timezone dest=/etc/timezone
  notify: update tzdata
  sudo: yes

- name: Add SSH ports to ufw rules.
  ufw: policy=allow to_port={{ item }}
  with_items:
    - "{{ alternate_sshd_port }}"
    - 22
  when: ufw_enabled is defined and ufw_enabled|bool
  sudo: yes

# TODO(jamalex): fix this to re-enable SSH login limits; right now, it throws error:
#   "value of default must be one of: allow,deny,reject, got: limit"

# - name: Limit SSH login attempts.
#   ufw: policy=limit to_port={{ alternate_sshd_port }}
#   when: ufw_enabled is defined and ufw_enabled|bool
#   sudo: yes

- name: Add role-specific ports to ufw rules.
  ufw: policy=allow to_port={{ item }}
  with_items: ufw_allowed_ports
  when: ufw_allowed_ports is defined and ufw_enabled is defined and ufw_enabled|bool
  sudo: yes
  tags:
    - proxy

- name: Check UFW status.
  command: ufw status
  sudo: yes
  when: ufw_enabled is defined
  register: ufw_status
  changed_when: False

- name: Enable UFW.
  command: ufw --force enable
  sudo: yes
  when: "ufw_status.stdout is defined and 'Status: inactive' in ufw_status.stdout and ufw_enabled|bool"

- name: Disable UFW.
  command: ufw --force disable
  sudo: yes
  when: "ufw_status.stdout is defined and 'Status: active' in ufw_status.stdout and not ufw_enabled|bool"

- name: Generate random password (won't actually get used for logins).
  local_action: shell openssl passwd -in /dev/urandom | head -1
  changed_when: no
  register: password
  tags:
    - sshusers

- name: Add accounts for admins and add them to the sudoers group.
  user: "name='{{ item }}' password='{{ password.stdout }}' groups='sudo' shell='/bin/bash' update_password='on_create'"
  with_items: "{{ admins.keys() }}"
  sudo: yes
  tags:
    - sshusers

- name: Remove accounts for former admins.
  user: "name='{{ item }}' state=absent"
  with_items: "{{ former_admins }}"
  sudo: yes
  tags:
    - sshusers

- name: Create the users' .ssh directories.
  file: "dest=/home/{{ item }}/.ssh owner={{ item }} state=directory"
  with_items: "{{ admins.keys() }}"
  sudo: yes
  tags:
    - sshusers

- name: Add authorized_keys for admin SSH logins.
  template: "src=authorized_keys.j2 dest=/home/{{ item }}/.ssh/authorized_keys owner={{ item }}"
  when: item in authorized_users
  with_items: "{{ admins.keys() }}"
  sudo: yes
  notify:
    - restart ssh
  tags:
    - sshusers

- name: Remove authorized_keys for unauthorized admin SSH logins.
  copy: "content='' dest=/home/{{ item }}/.ssh/authorized_keys owner={{ item }}"
  when: item not in authorized_users
  with_items: "{{ admins.keys() }}"
  sudo: yes
  notify:
    - restart ssh
  tags:
    - sshusers

- name: Ensure sudoers don't need to enter password
  lineinfile: "dest=/etc/sudoers state=present regexp='^%sudo[\t ]+ALL' line='%sudo ALL=(ALL:ALL) NOPASSWD: ALL' validate='visudo -cf %s'"
  sudo: yes
  tags:
    - sshusers
