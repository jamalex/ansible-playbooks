---

- name: Package prerequisites for node.js
  apt: pkg=python-software-properties state=installed
  sudo: yes

- name: Add the node.js PPA
  command: add-apt-repository -y ppa:chris-lea/node.js creates=/etc/apt/sources.list.d/chris-lea-node_js-precise.list
  sudo: yes

- name: Install nodejs (with npm)
  apt: pkg=nodejs state=installed update-cache=yes
  sudo: yes

- name: Install required Node.js packages.
  npm: name={{ item }} global=yes
  with_items:
    - grunt-cli
  sudo: yes

- name: Setup general Apache config file.
  template: src=apache2.conf.j2 dest=/etc/apache2/apache2.conf
  sudo: yes
  notify: restart apache2

- name: Setup Apache ports config file.
  template: src=apache-ports.conf.j2 dest=/etc/apache2/ports.conf
  sudo: yes
  notify: restart apache2

- name: Setup KA Lite Apache site conf file.
  template: src=ka-lite-apache2-site.j2 dest=/etc/apache2/sites-available/001-kalite
  sudo: yes
  notify: restart apache2

- name: Enable the KA Lite Apache site.
  file: dest=/etc/apache2/sites-enabled/001-kalite src=/etc/apache2/sites-available/001-kalite state=link
  sudo: yes
  notify: restart apache2

- name: Remove default dummy Apache conf file.
  file: dest=/etc/apache2/sites-enabled/000-default state=absent
  sudo: yes
  notify: restart apache2

- name: Create the /var/www directory and set it as belonging to the www-data user.
  file: dest=/var/www owner=www-data state=directory
  sudo: yes

- name: Clone the ka-lite-central git repository and checkout the desired branch.
  git: repo=https://github.com/fle-internal/ka-lite-central.git version={{ ka_lite_central_git_branch }} dest={{ ka_lite_central_path }} update=true force=yes recursive=no
  sudo: yes
  sudo_user: www-data
  register: ka_lite_central_clone
  notify: restart apache2
  tags:
    - update_ka_lite_central

- name: Update ka-lite-central git submodules.
  shell: git submodule update --init chdir={{ ka_lite_central_path }}
  sudo: yes
  sudo_user: www-data
  register: ka_lite_central_submodule_update
  changed_when: "'checked out' in ka_lite_central_submodule_update.stdout"
  notify: restart apache2
  tags:
    - update_ka_lite_central

- name: Install ka-lite-central Python package requirements
  pip: requirements={{ ka_lite_central_path }}/requirements.txt
  when: ka_lite_central_clone.changed
  tags:
    - update_ka_lite_central
  sudo: yes

- name: Install ka-lite-submodule main Python package requirements
  pip: requirements={{ ka_lite_central_path }}/ka-lite-submodule/requirements.txt
  when: ka_lite_central_clone.changed
  tags:
    - update_ka_lite_central
  sudo: yes

# - name: Install ka-lite-submodule dev Python package requirements
#   pip: requirements={{ ka_lite_central_path }}/ka-lite-submodule/requirements_dev.txt
#   when: ka_lite_central_clone.changed
#   tags:
#     - update_ka_lite_central
#   sudo: yes

# - name: Install ka-lite-submodule testing Python package requirements
#   pip: requirements={{ ka_lite_central_path }}/ka-lite-submodule/requirements_test.txt
#   when: ka_lite_central_clone.changed
#   tags:
#     - update_ka_lite_central
#   sudo: yes

- name: Install required ka-lite-central Node.js packages.
  npm: name={{ item }} path={{ ka_lite_central_path }}
  when: ka_lite_central_clone.changed
  with_items:
    - grunt
    - less
    - grunt-contrib-less
    - grunt-contrib-jshint
    - grunt-contrib-concat
  sudo: yes
  sudo_user: www-data
  tags:
    - update_ka_lite_central

- name: Install required ka-lite-submodule Node.js packages.
  npm: path={{ ka_lite_central_path }}/ka-lite-submodule
  sudo: yes
  sudo_user: www-data
  when: ka_lite_central_clone.changed
  tags:
    - update_ka_lite_central

- name: Put the local_settings.py file into the KA Lite project directory.
  template: src=local_settings.py.j2 dest={{ ka_lite_central_path }}/centralserver/local_settings.py owner=www-data
  sudo: yes
  notify: restart apache2
  tags:
    - update_ka_lite_central

- name: Ensure a local_settings_secret.py file exists.
  sudo: yes
  sudo_user: www-data
  command: touch {{ ka_lite_central_path }}/centralserver/local_settings_secrets.py creates={{ ka_lite_central_path }}/centralserver/local_settings_secrets.py
  notify: restart apache2
  tags:
    - update_ka_lite_central

- name: Update the SECRET_KEY in local_settings_secret.py if variable 'ka_lite_central_secret_key' is defined.
  lineinfile: dest={{ ka_lite_central_path }}/centralserver/local_settings_secrets.py regexp='^SECRET_KEY =' line='SECRET_KEY = "{{ ka_lite_central_secret_key }}"' owner="www-data"
  sudo: yes
  sudo_user: www-data
  when: ka_lite_central_secret_key is defined
  notify: restart apache2
  tags:
    - update_ka_lite_central

- name: Update the POSTMARK_API_KEY in local_settings_secret.py if variable 'postmark_api_key' is defined.
  lineinfile: dest={{ ka_lite_central_path }}/centralserver/local_settings_secrets.py regexp='^POSTMARK_API_KEY =' line='POSTMARK_API_KEY = "{{ postmark_api_key }}"' owner="www-data"
  sudo: yes
  sudo_user: www-data
  when: postmark_api_key is defined
  notify: restart apache2
  tags:
    - update_ka_lite_central

- name: Update the DATABASE_PASSWORD in local_settings_secret.py if variable 'ka_lite_central_db_pass' is defined.
  lineinfile: dest={{ ka_lite_central_path }}/centralserver/local_settings_secrets.py regexp='^DATABASE_PASSWORD =' line='DATABASE_PASSWORD = "{{ ka_lite_central_db_pass }}"' owner="www-data"
  sudo: yes
  sudo_user: www-data
  when: ka_lite_central_db_pass is defined
  notify: restart apache2
  tags:
    - update_ka_lite_central

- name: Make sure KA_CROWDIN_PROJECT_KEY exists in local_settings_secrets.py
  lineinfile: dest={{ ka_lite_central_path }}/centralserver/local_settings_secrets.py regexp='^KA_CROWDIN_PROJECT_KEY' line='KA_CROWDIN_PROJECT_KEY = "{{ ka_crowdin_project_key }}"'
  sudo: yes
  sudo_user: www-data
  when: ka_crowdin_project_key is defined
  notify: restart apache2
  tags:
    - update_ka_lite_central

- name: Make sure CROWDIN_PROJECT_KEY exists in local_settings_secrets.py
  lineinfile: dest={{ ka_lite_central_path }}/centralserver/local_settings_secrets.py regexp='^CROWDIN_PROJECT_KEY' line='CROWDIN_PROJECT_KEY = "{{ crowdin_project_key }}"'
  sudo: yes
  sudo_user: www-data
  when: crowdin_project_key is defined
  notify: restart apache2
  tags:
    - update_ka_lite_central

- name: Make sure KHAN_API_CONSUMER_KEY exists in local_settings_secrets.py
  lineinfile: dest={{ ka_lite_central_path }}/centralserver/local_settings_secrets.py regexp='^KHAN_API_CONSUMER_KEY' line='KHAN_API_CONSUMER_KEY = "{{ khan_api_consumer_key }}"'
  sudo: yes
  sudo_user: www-data
  when: khan_api_consumer_key is defined
  notify: restart apache2
  tags:
    - update_ka_lite_central

- name: Make sure KHAN_API_CONSUMER_SECRET exists in local_settings_secrets.py
  lineinfile: dest={{ ka_lite_central_path }}/centralserver/local_settings_secrets.py regexp='^KHAN_API_CONSUMER_SECRET' line='KHAN_API_CONSUMER_SECRET = "{{ khan_api_consumer_secret }}"'
  sudo: yes
  sudo_user: www-data
  when: khan_api_consumer_secret is defined
  notify: restart apache2
  tags:
    - update_ka_lite_central

- name: Create empty database template directory to avoid errors when running setup.
  file: path={{ ka_lite_central_path }}/ka-lite-submodule/kalite/database/templates/content_items state=directory recurse=yes
  sudo: yes
  sudo_user: www-data
  tags:
    - update_ka_lite_central

- name: Compile the static KA Lite resources by running the Gruntfile.
  command: grunt chdir={{ ka_lite_central_path }}
  sudo: yes
  sudo_user: www-data
  changed_when: False
  when: ka_lite_central_clone.changed
  tags:
    - update_ka_lite_central

- name: Compile additional static KA Lite resources by running `node build.js`.
  command: node build.js chdir={{ ka_lite_central_path }}/ka-lite-submodule/
  sudo: yes
  sudo_user: www-data
  changed_when: False
  when: ka_lite_central_clone.changed
  tags:
    - update_ka_lite_central

- name: Run setup command to ensure KA Lite is initialized (new install or upgrade).
  shell: "echo 'yes\n' | {{ ka_lite_central_path }}/centralserver/manage.py setup --noinput -u {{ ka_lite_central_django_superuser_name }} -e {{ ka_lite_central_django_superuser_email }} -p {{ ka_lite_central_django_superuser_pass }} -o 'Central Server' -d 'The Actual Central Server' --no-assessment-items"
  register: setup
  sudo: yes
  sudo_user: www-data
  when: ka_lite_central_django_superuser_name is defined and ka_lite_central_django_superuser_email is defined and ka_lite_central_django_superuser_pass is defined
  changed_when: "'Migrating forwards' in setup.stdout"
  # failed_when: "setup.stderr"
  tags:
    - update_ka_lite_central

- name: Run setup command to ensure KA Lite is initialized (upgrade).
  shell: "echo 'yes\n' | {{ ka_lite_central_path }}/centralserver/manage.py setup --noinput --no-assessment-items"
  register: setup
  sudo: yes
  sudo_user: www-data
  when: ka_lite_central_django_superuser_name is not defined or ka_lite_central_django_superuser_email is not defined or ka_lite_central_django_superuser_pass is not defined
  changed_when: "'Migrating forwards' in setup.stdout"
  # failed_when: "setup.stderr"
  tags:
    - update_ka_lite_central

- name: Run retrievecontentpack command to ensure KA Lite has a content pack (needed for coach reports).
  shell: "{{ ka_lite_central_path }}/centralserver/manage.py retrievecontentpack --minimal download en"
  sudo: yes
  sudo_user: www-data
  when: ka_lite_central_clone.changed
  tags:
    - update_ka_lite_central

- name: Create data/subtitles directory.
  file: path={{ ka_lite_central_path }}/data/subtitles/ state=directory recurse=yes
  sudo: yes
  sudo_user: www-data
  tags:
    - language_packs

- name: Copy srts_remote_availability.json from our local seed file.
  copy: src=srts_remote_availability.json dest={{ ka_lite_central_path }}/data/subtitles/srts_remote_availability.json force=no
  sudo: yes
  sudo_user: www-data
  tags:
    - language_packs

- name: Create the language_pack directory and set it as belonging to the www-data user.
  file: dest={{ ka_lite_central_path }}/centralserver/media/language_packs owner=www-data state=directory
  sudo: yes
  tags:
    - language_packs

- name: Make sure we delete the lang pack builder cron job
  cron: name="build language packs" minute="0" hour="23" job="{{ ka_lite_central_path }}/../ka-lite-lang-pack-builder.sh" user=www-data state=absent
  sudo: yes
  sudo_user: www-data
  tags:
    - language_packs

- name: Create cron job to clear sessions in our DB.
  cron: name="Clear sessions" minute="30" hour="22" job="python {{ ka_lite_central_path }}/centralserver/manage.py cleanup" user=www-data
  sudo: yes
  sudo_user: www-data
  tags:
    - cleanup

- name: Ensure the ka-lite-central/data directory exists and set it as belonging to the www-data user.
  file: dest={{ ka_lite_central_path }}/data owner=www-data state=directory
  sudo: yes
  tags:
    - "geoip"

- name: Download and unpack the GeoIP data file if it doesn't yet exist.
  shell: curl http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz | gunzip > {{ ka_lite_central_path }}/data/GeoLiteCity.dat creates={{ ka_lite_central_path }}/data/GeoLiteCity.dat
  sudo: yes
  sudo_user: www-data
  tags:
    - "geoip"

- name: Ensure the locations directory exists and set it as belonging to the www-data user.
  file: dest={{ ka_lite_central_path }}/centralserver/media/locations owner=www-data state=directory
  sudo: yes
  sudo_user: www-data
  tags:
    - "geoip"

- name: Ensure the ka-lite-central/data/logs/github/ directory exists and set it as belonging to the www-data user.
  file: dest={{ ka_lite_central_path }}/data/logs/github owner=www-data state=directory
  sudo: yes

- name: Setup GitHub data download script file.
  template: src=download_github_stats.py.j2 dest={{ ka_lite_central_path }}/data/logs/github/download_github_stats.py mode=0755
  when: learneq_github_password is defined
  sudo: yes

- name: Create cron job to download GitHub data.
  cron: 'name="download github data" minute="0" hour="9" job="{{ ka_lite_central_path }}/data/logs/github/download_github_stats.py" user=www-data'
  sudo: yes
  sudo_user: www-data

- name: Create cron job to update IP location JSONP file.
  cron: 'name="update locations jsonp file" minute="0" hour="6" job="{{ ka_lite_central_path }}/centralserver/manage.py write_ip_locations --locations {{ ka_lite_central_path }}/centralserver/media/locations/locations.jsonp --locations_csv {{ ka_lite_central_path }}/centralserver/media/locations/locations.csv --countries {{ ka_lite_central_path }}/centralserver/media/locations/countries.txt --kml {{ ka_lite_central_path }}/centralserver/media/locations/locations.kml --country_csv {{ ka_lite_central_path }}/centralserver/media/locations/countries.csv  --continent_csv {{ ka_lite_central_path }}/centralserver/media/locations/continents.csv" user=www-data'
  sudo: yes
  sudo_user: www-data
  tags:
    - "geoip"

- name: Ensure the /var/backups/mysql directory exists and set it as belonging to the root user.
  file: dest=/var/backups/mysql owner=root state=directory
  sudo: yes

- name: Create cron job to back up the database.
  cron: 'name="back up the ka_lite_central database" minute="0" hour="1,13" job="mysqldump -h {{ db_server_host }} -u {{ ka_lite_central_db_user }} -p{{ ka_lite_central_db_pass }} ka_lite_central --single-transaction --quick | gzip > /var/backups/mysql/ka_lite_central_`date +\%Y-\%m-\%d_\%H-\%M-\%S`.sql.gz" user=root'
  when: ka_lite_central_db_pass is defined
  sudo: yes

# - name: Copy database fixture to server.
#   copy: src=data.json dest=/var/www/data.json owner=www-data

# - name: Load database fixture.
#   sudo: yes
#   sudo_user: www-data
#   shell: "{{ ka_lite_central_path }}/centralserver/manage.py loaddata /var/www/data.json"
