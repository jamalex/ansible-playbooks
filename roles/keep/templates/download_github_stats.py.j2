#!/usr/bin/env python

import re, requests, json, os, datetime

PATH = os.path.dirname(os.path.realpath(__file__))

def update_json_file(filename, data):

    try:
        with open(filename, "r") as f:
            data_dict = json.loads(f.read() or "{}")
    except IOError:
        data_dict = {}

    with open(filename, "w") as f:
        for day in data:
            bucket = str(day.pop("bucket"))
            data_dict[bucket] = day
        json.dump(data_dict, f)

headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:28.0) Gecko/20100101 Firefox/28.0',
    'Accept': 'application/json, text/javascript, */*; q=0.01',
    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
    'X-Requested-With': 'XMLHttpRequest'
}

def get_github_graph_data(path):

    s = requests.session()
    r = s.get("https://github.com/login")
    csrf = re.search('<input name="authenticity_token" type="hidden" value="[^"]+', r.content).group().split('"')[-1]
    r = s.post("https://github.com/session", data={
        "utf8": u"\u2713",
        "authenticity_token": csrf,
        "login": "learneq",
        "password": "{{ learneq_github_password }}",
        "return_to": path,
        "commit": "Sign in",
    }, headers=headers)

    return json.loads(r.content)["counts"]

clone_data = get_github_graph_data("/learningequality/ka-lite/graphs/clone-activity-data")

traffic_data = get_github_graph_data("/learningequality/ka-lite/graphs/traffic-data")

update_json_file(os.path.join(PATH, "clone_data.json"), clone_data)

update_json_file(os.path.join(PATH, "traffic_data.json"), traffic_data)


# Now, update the log files to be picked up by logstash

with open("clone_data.json") as f:
    clone_json = json.load(f)

with open("traffic_data.json") as f:
    traffic_json = json.load(f)

output = []

with open("github.log", "w") as f:

    for timestamp in sorted(set(clone_json.keys()) & set(traffic_json.keys())):

        entry = {
            "timestamp": str(datetime.datetime.fromtimestamp(int(timestamp)))
        }

        if timestamp in clone_json:
            entry["clone_total"] = clone_json[timestamp]["total"]
            entry["clone_unique"] = clone_json[timestamp]["unique"]

        if timestamp in traffic_json:
            entry["traffic_total"] = traffic_json[timestamp]["total"]
            entry["traffic_unique"] = traffic_json[timestamp]["unique"]

        output.append(json.dumps(entry) + "\n")

    f.writelines(output)

