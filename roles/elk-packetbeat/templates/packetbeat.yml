################### Packetbeat Agent Configuration Example ######################

# This file contains an overview of various configuration settings. Please consult
# the docs at <http://packetbeat.com/docs/configuration.html> for more details.

# The Packetbeat shipper works by sniffing the network traffic between your
# application components. It inserts meta-data about each transaction into
# Elasticsearch.

############################# Agent ############################################
shipper:

  # The name of the shipper that publishes the network data. It can be used to group 
  # all the transactions sent by a single shipper in the web interface.
  # If this options is not defined, the hostname is used.
  # name:

  # The tags of the shipper are included in their own field with each
  # transaction published. Tags make it easy to group transactions by different
  # logical properties.
  #tags: ["service1"]

  # Uncomment the following if you want to ignore transactions created
  # by the server on which the shipper is installed. This option is useful
  # to remove duplicates if shippers are installed on multiple servers.
  # ignore_outgoing: true

############################# Sniffer ############################################

# Select the network interfaces to sniff the data. You can use the "any"
# keyword to sniff on all connected interfaces.
interfaces:
  device: "{{ packetbeat.config.interface.device }}"

############################# Protocols ######################################
protocols:

  http:
    ports:
      - 80
      - 8080
      - 8008
      - 9000
      - 7007
    hide_keywords: ["pass", "password", "passwd"]
    send_headers: ["User-Agent"]
    real_ip_header: "X-Forwarded-For"

{% for name, protocol in packetbeat.config.protocols.items() %}
{% if protocol.enabled %}
  {{ name }}:
    ports: [{{ protocol.ports|join(", ") }}]
{% endif %}
{% endfor %}

############################# Output ############################################

# Configure what outputs to use when sending the data collected by packetbeat.
# You can enable one or multiple outputs by setting enabled option to true.
output:

  # Elasticsearch as output
  # Options:
  # host, port: where Elasticsearch is listening on
  # save_topology: specify if the topology is saved in Elasticsearch
  elasticsearch:
    enabled: {{ packetbeat.config.output.elasticsearch.enabled }}
    host: "{{ packetbeat.config.output.redis.host }}"
    port: {{ packetbeat.config.output.elasticsearch.port }}
    save_topology: {{ packetbeat.config.output.elasticsearch.save_topology }}

  # Redis as output
  # Options:
  # host, port: where Redis is listening on
  # save_topology: specify if the topology is saved in Redis
  redis:
    enabled: {{ packetbeat.config.output.redis.enabled }}
    host: "{{ packetbeat.config.output.redis.host }}"
    port: {{ packetbeat.config.output.redis.port }}
    save_topology: {{ packetbeat.config.output.elasticsearch.save_topology }}

############################# Processes ############################################

# Configure the processes to be monitored and how to find them. If a process is
# monitored than Packetbeat attempts to use it's name to fill in the `proc` and
# `client_proc` fields.
# The processes can be found by searching their command line by a given string.

procs:
  enabled: true
  monitored:
{% for name, proc in packetbeat.config.processes.items() %}
{% if proc.enabled %}
    - process: {{ name }}
      cmdline_grep: "{{ proc.cmdline_grep }}"
{% endif %}
{% endfor %}

